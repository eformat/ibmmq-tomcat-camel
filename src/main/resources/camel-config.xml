<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <bean id="qcf" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jms/MyQCF" />
        <property name="lookupOnStartup" value="false" />
        <property name="cache" value="true" />
        <property name="proxyInterface" value="javax.jms.QueueConnectionFactory" />
    </bean>

    <bean id="jmsComponent" class="org.apache.camel.component.jms.JmsComponent">
        <property name="connectionFactory" ref="qcf" />
        <property name="username" value="app" />
        <property name="password" value="" />
    </bean>

    <camelContext xmlns="http://camel.apache.org/schema/spring">

        <route id="helloRoute">
            <!-- incoming requests from the servlet is routed -->
            <from uri="servlet:hello"/>
            <choice>
                <when>
                    <!-- is there a header with the key name? -->
                    <header>name</header>
                    <!-- yes so return back a message to the user -->
                    <transform>
                        <simple>Hi I am ${sysenv.HOSTNAME}. Hello ${header.name} how are you today?</simple>
                    </transform>
                    <setExchangePattern pattern="InOnly"/>
                    <to uri="jmsComponent:queue:DEV.QUEUE.1"/>
                </when>
                <otherwise>
                    <!-- if no name parameter then output a syntax to the user -->
                    <transform>
                        <constant>Add a name parameter to uri, eg ?name=foo</constant>
                    </transform>
                </otherwise>
            </choice>
        </route>

    </camelContext>

</beans>
